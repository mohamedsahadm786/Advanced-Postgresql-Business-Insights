-- Business Problems - Advanced Analysis --
---====================================----

/*
1)- Top Selling Products.
Query the top 10 products by total sales value.
Challenge: Include Product name, category name, total quantity sold, and total sales value.
*/

-- order_items - orders - products - category (join all these 4 tables)
-- sum (quantities)*(price_per_unit)
-- only select those orders with delivery_status 'Delivered'
-- group by product_id
-- select top 10 products

SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM products;
SELECT * FROM category;

-- Creating new column (total_sale)
ALTER TABLE order_items
ADD COLUMN total_sale FLOAT;

-- Adding values to this new column
UPDATE order_items 
SET total_sale = quantity * price_per_unit;
SELECT * FROM order_items;

SELECT 
    oi.product_id,
	p.product_name,
	c.category_name,
	SUM(total_sale) as total_sale,
	COUNT(o.order_id) as total_orders
FROM orders as o
JOIN order_items as oi
ON oi.order_id = o.order_id
JOIN products as p
ON p.product_id = oi.product_id
JOIN category as c
ON c.category_id = p.category_id
WHERE o.order_status = 'Delivered'
GROUP BY 1,2,3
ORDER BY 4 DESC
LIMIT 10;




/*
2)- Revenue By Category.
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

SELECT 
	c.category_id,
	c.category_name,
	SUM(oi.total_sale) as total_sale,
	(SUM(oi.total_sale)/(SELECT SUM(total_sale) FROM order_items))*100 as contribution
FROM category as c
JOIN products as p 
ON c.category_id = p.category_id
JOIN order_items as oi
ON oi.product_id = p.product_id
GROUP BY 1,2
ORDER BY 1 ASC;



/*
3)- Average Order Value(AOV).
Calculate the average order value for each customer.
Challenge: Include only customers with more than 40 orders.
*/


SELECT * FROM customers;

SELECT 
	 cu.customer_id,
	 CONCAT(cu.first_name,' ', cu.last_name) as Name,
	 SUM(oi.total_sale)/COUNT(o.customer_id) as AOV,
	 COUNT(o.customer_id) as Total_orders
FROM order_items as oi
JOIN orders as o
ON oi.order_id = o.order_id
JOIN customers as cu 
ON o.customer_id = cu.customer_id
GROUP BY 1
HAVING COUNT(o.customer_id)>40
ORDER BY 1 ASC;



/*
4)- Monthly Sales Trend.
Query monthly total sales over the year 2016.
Challenge: Display the sales trend, group by month, and return the current-month sale and the last-month sale.
*/

SELECT * FROM order_items;


SELECT 
   year,
   month,
   total_sale as current_month_sale,
   LAG(total_sale,1) OVER(ORDER BY year,month) as previous_month_salary
FROM
(
	SELECT 
	    EXTRACT(YEAR FROM o.order_date) as year,
		TO_CHAR(o.order_date, 'Month') as month,
		ROUND(SUM(oi.total_sale)::NUMERIC,2) as total_sale
	FROM orders as o
	JOIN order_items as oi
	ON o.order_id = oi.order_id
	WHERE EXTRACT(YEAR FROM order_date) = 2016
	GROUP BY 1,2
	ORDER BY 3 DESC
);



/*
5)- Customers With No Purchases.
Find Customers who have registered but never placed an order.
Challenge: List customer details.
*/


SELECT * FROM customers; 


-- METHOD 1
--------------

SELECT 
    c.customer_id,
	CONCAT(c.first_name,' ',c.last_name),
	state
FROM customers as c
LEFT JOIN orders as o
ON c.customer_id = o.customer_id
WHERE o.customer_id IS NULL;


-- METHOD 2
--------------
SELECT 
    customer_id,
	CONCAT(first_name,' ',last_name),
	state
FROM customers 
WHERE customer_id NOT IN
                     (
                      SELECT DISTINCT customer_id
					  FROM orders
					 );


/*
6)- Least Selling Categories by State.
Identify the least selling product category for each state.
Challenge: Include the total sales for that category with in each state.
*/

select DISTINCT state from customers;
select * from orders;
select * from order_items;
select * from products;


WITH ranking_table
AS
(
SELECT 
    c.state,
	ca.category_name,
	SUM(oi.total_sale) as total_sale,
	RANK() OVER(PARTITION BY c.state ORDER BY SUM(oi.total_sale) ASC) as rank
FROM products as p
JOIN order_items as oi
on p.product_id = oi.product_id
JOIN orders as o
ON o.order_id = oi.order_id
JOIN customers as c
ON c.customer_id = o.customer_id
JOIN category as ca
ON ca.category_id = p.category_id
GROUP BY 1,2
ORDER BY 1,3 
)
SELECT 
    state,
	category_name,
	total_sale
FROM ranking_table
WHERE rank = 1;



/*
7)- Customer Lifetime Value(CLTV).
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV
*/

select * from order_items;
select * from orders;
select * from customers;

SELECT 
    c.customer_id,
	CONCAT(c.first_name,' ',c.last_name) as full_name,
	SUM(oi.total_sale) as CLTV,
	DENSE_RANK() OVER(ORDER BY SUM(oi.total_sale) DESC) as rank
FROM order_items as oi
JOIN orders as o
ON o.order_id = oi.order_id
JOIN customers as c
ON o.customer_id = c.customer_id
GROUP BY c.customer_id;



/*
8)- Inventory Stock Alerts.
Query product with stock levels below a certain threshold (eg:- less than 10 units).
Challenge: Include last restock date and warehouse information
*/


SELECT
    i.inventory_id,
	p.product_name,
	i.stock as stock_left,
	i.last_stock_date,
	i.warehouse_id
FROM inventory as i
JOIN products as p
ON i.product_id = p.product_id
WHERE i.stock < 10;


/*
9)- Shipping Delays.
Identify orders where the shipping date is later than 4 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

select * from shippings;
select * from orders;
select * from customers;

SELECT 
    c.customer_id,
	CONCAT(c.first_name,' ',c.last_name) as full_name,
    s.shipping_date,
	o.order_date,
    s.shipping_date - o.order_date as days_took_to_ship,
	s.shipping_providers
FROM shippings as s
JOIN orders as o
ON s.order_id = o.order_id
JOIN customers as c
ON c.customer_id = o.customer_id
WHERE (s.shipping_date - o.order_date) > 4;



/*
10)- Payment Success Rate.
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status(er:- failed, pending).
*/

select * from payments;
select * from orders;

SELECT
    p.payment_status,
	COUNT(*) as no_of_payments,
	COUNT(*)::NUMERIC/(SELECT COUNT(payment_status) FROM payments)*100 as payment_percentage
FROM payments as p
JOIN orders as o
ON p.order_id = o.order_id
GROUP BY 1;



/*
11)- Top performing Sellers.
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful order. 
*/


select * from sellers;
select * from order_items;
select * from orders  ;


WITH top_sellers
AS
(
SELECT 
    s.seller_id,
	s.seller_name,
	SUM(oi.total_sale) as total_sale
FROM orders as o 
JOIN sellers as s
ON o.seller_id = s.seller_id
JOIN order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 5
),

seller_reports
AS
(
SELECT
    o.seller_id,
    o.order_status,
	ts.seller_name,
	SUM(ts.total_sale) as total_sale,
	COUNT(*) as total_orders
FROM orders as o
JOIN top_sellers as ts
ON o.seller_id = ts.seller_id
GROUP BY 1,2,3
)

SELECT
    seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) as Completed_order,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) as Cancelled_order,
	SUM(total_orders) as total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END)::numeric/
	                           SUM(total_orders)::numeric * 100 as successful_order_percentage
FROM seller_reports
WHERE order_status <> 'Returned'
GROUP BY 1,2
ORDER BY seller_id;




/*
12)- Product Profit Margin.
Calculate the profit margin for each product(difference between the price and the cogs)
Challenge: Rank the product by their profit margin, showing highest to lowest.
*/


select * from products;
select * from order_items;

SELECT 
    p.product_id,
	p.product_name,
	SUM(oi.total_sale - (p.cogs * oi.quantity)) as profit,
	SUM(oi.total_sale - (p.cogs * oi.quantity))/SUM(total_sale) * 100 as profit_margin,
	DENSE_RANK() OVER(ORDER BY 
	                 (SUM(oi.total_sale - (p.cogs * oi.quantity))/SUM(total_sale) * 100) DESC) as rank
FROM products as p
JOIN order_items as oi
ON p.product_id = oi.product_id
GROUP BY 1;



/*
13)- Most Returned Product.
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

select * from order_items;
select * from orders;
select * from products;

SELECT
    oi.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as no_of_returns,
	(SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/
	                             COUNT(*)) *100 as return_rate
FROM orders as o
JOIN order_items as oi
ON o.order_id = oi.order_id
JOIN products as p
ON p.product_id = oi.product_id
WHERE o.order_status <> 'Cancelled'
GROUP BY 1,2
ORDER BY 5 DESC
LIMIT 10;




/*
14)- Identify Inactive Sellers.
Identify sellers who haven't made any sales in the last 4 months of 2017.
Challenge: Show the last sale date.
*/

select * from sellers;
select * from orders;
select * from order_items;


WITH inactive_sellers
AS
(
SELECT *
FROM sellers
WHERE seller_id NOT IN
            ( 
			SELECT seller_id
			FROM orders
			WHERE order_date >= '2017-09-01'
			) 
)
SELECT
    o.seller_id,
	MAX(o.order_date) as last_sale_date
FROM orders as o
JOIN inactive_sellers as i
ON o.seller_id = i.seller_id
GROUP BY 1;





/*
15)- IDENTITY Customers into returning or new.
If the new customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers' IDs, names, total orders, total returns.
*/

select * from orders;
select * from customers;
select * from order_items;


SELECT 
    full_name as Customers,
	CASE WHEN total_returned >5 THEN 'Returning_Customers' ELSE 'New' END as Customers_category,
	total_orders,
	total_returned
FROM
	(
		SELECT 
		    c.customer_id,
			CONCAT(c.first_name,' ',c.last_name) as full_name,
			COUNT(o.order_id) as total_orders,
			SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END ) as total_returned
		FROM orders as o
		JOIN customers as c
		ON o.customer_id = c.customer_id
		JOIN order_items as oi
		ON oi.order_id = o.order_id
		GROUP BY 1
	);





/*
16)- Top 5 Customers by Orders in Each State.
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/


SELECT *
FROM 
	(
		SELECT 
		    c.state,
		    c.customer_id,
			CONCAT(c.first_name,' ',c.last_name) as full_name,
			COUNT(o.order_id) as total_orders,
			SUM(oi.total_sale) as total_sale,
			DENSE_RANK() OVER(PARTITION BY c.state ORDER BY SUM(oi.total_sale) DESC) as rank
		FROM customers as c 
		JOIN orders as o
		ON c.customer_id = o.customer_id
		JOIN order_items as oi
		ON oi.order_id = o.order_id
		GROUP BY 1,2
	)
WHERE rank <= 5;




/*
17)- Revenue By Shipping Provider.
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average shipping time for each provider.
*/

select * from shippings;
select * from order_items;
select * from orders;


SELECT 
    s.shipping_providers,
	SUM(oi.total_sale) as total_sale,
	COUNT(*) as order_handled,
	AVG(s.shipping_date - o.order_date) as AVG_shipping_days
FROM shippings as s
JOIN order_items as oi
ON s.order_id = oi.order_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1
ORDER BY 2 DESC;





/*
18)- Top 10 Product with highest decreasing revenue ratio compared to the year 2016 and 2017.
Challenge: Return product_id, product_name, category_name, 2016 revenue and 2017 revenue decrease ratio at the end round the result.
Note: Decrease ratio = y_2017-y_2016/y_2016 * 100 (y_2017 = year 2017)
*/

select * from orders;
select * from order_items;
select * from products;

WITH y_2016
AS
	(
		SELECT 
		    p.product_id,
			p.product_name,
			SUM(oi.total_sale) as total_revenue,
			EXTRACT(YEAR FROM o.order_date) as year
		FROM orders as o
		JOIN order_items as oi
		ON o.order_id = oi.order_id
		JOIN products as p
		ON p.product_id = oi.product_id 
		WHERE EXTRACT(YEAR FROM o.order_date) = 2016
		GROUP BY 1,4
		ORDER BY 3 DESC
		
	),
y_2017
AS
	(
		SELECT 
			p.product_id,
			p.product_name,
			SUM(oi.total_sale) as total_revenue,
			EXTRACT(YEAR FROM o.order_date) as year
		FROM orders as o
		JOIN order_items as oi
		ON o.order_id = oi.order_id
		JOIN products as p
		ON p.product_id = oi.product_id 
		WHERE EXTRACT(YEAR FROM o.order_date) = 2017
		GROUP BY 1,4
		ORDER BY 3 DESC
		
	)
SELECT 
    y_7.product_id,
	y_7.product_name,
	y_7.total_revenue as revenue_2017,
	y_6.total_revenue as revenue_2016,
	y_6.total_revenue - y_7.total_revenue  as revenue_diff,
	ROUND((y_7.total_revenue - y_6.total_revenue)::numeric/y_6.total_revenue::numeric * 100,2) as revenue_dec_ratio
FROM y_2016 as y_6
JOIN y_2017 as y_7
ON y_6.product_id = y_7.product_id
WHERE y_6.total_revenue > y_7.total_revenue
ORDER BY 6 DESC
LIMIT 10;




/*
FINAL TASK:-

### STORE PROCEDURE
---------------------
Create a function as soon as the product is sold, the same quantity should reduce from the inventory table
after adding any sales record, it should update the stock in the inventory table based on the product and quantity purchased.
*/

select * from products;
select * from inventory;
select * from orders;
select * from order_items;
/* HERE WE NEED
 - order_id
 - order_date
 - customer_id
 - seller_id
 - order_item_id
 - product_id
 - quantity
*/

CREATE OR REPLACE PROCEDURE add_sales
(
 p_order_id INT,
 p_customer_id INT,
 p_seller_id INT,
 p_order_item_id INT,
 p_product_id INT,
 p_quantity INT
)
LANGUAGE plpgsql
AS
$$

DECLARE
-- All variables
v_count INT;
v_price FLOAT;
v_product VARCHAR(50);

BEGIN
-- All the code and logic
    -- Fetching product_name and price based on product_id enterd
    SELECT 
	    price, product_name
	    INTO 
		v_price,v_product
	FROM products
	WHERE product_id = p_product_id;

	-- Checking stock and product availability in inventory
	SELECT
	    COUNT(*) INTO v_count
	FROM inventory
	WHERE product_id = p_product_id 
	      AND 
		  stock >= p_quantity;
		  
	IF v_count > 0 
	
	THEN
	-- Add into orders and order_items table
	-- update inventory
	
		INSERT INTO orders(order_id, order_date, customer_id, seller_id)
		VALUES
		(p_order_id,CURRENT_DATE,p_customer_id,p_seller_id);

		-- adding into order list
		INSERT INTO order_items(order_item_id,order_id,product_id,quantity,price_per_unit,total_sale)
		VALUES
		(p_order_item_id,p_order_id,p_product_id,p_quantity,v_price,v_price * p_quantity);

		-- updating inventory
		UPDATE inventory
		SET stock = stock - p_quantity
		WHERE product_id = p_product_id;

		RAISE NOTICE 'Thank you Product: % sale has been added also inventory stock updates',v_product;
		
	ELSE
		RAISE NOTICE 'Thank you for your info the product: % is not available',v_product;

	END IF;


END;
$$

CALL add_sales
(
250001,2,5,250002,1,20
);
